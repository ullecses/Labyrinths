package backend.academy;

import backend.academy.generators.Generator;
import backend.academy.generators.GrowingTreeMazeGenerator;
import backend.academy.generators.KruskalMazeGenerator;
import backend.academy.solvers.AStarSolver;
import backend.academy.solvers.ShortestPathFinder;
import backend.academy.solvers.Solver;
import java.io.IOException;

public class ConsoleUserInterface implements UserInterface {
    public static final Coordinate SMALL_MAZE = new Coordinate(17, 31);
    public static final Coordinate MEDIUM_MAZE = new Coordinate(25, 45);
    public static final Coordinate LARGE_MAZE = new Coordinate(35, 65);
    public static final int SMALL_MAZE_ID = 1;
    public static final int MEDIUM_MAZE_ID = 2;
    public static final int LARGE_MAZE_ID = 3;
    private static final String INPUT_NULL = "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
    private static final String INPUT_INCORRECT = "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.";
    private static final String INPUT_NEED_1_OR_2 = "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 2.";

    private final IOHandler ioHandler;

    public ConsoleUserInterface(IOHandler ioHandler) {
        this.ioHandler = ioHandler;
    }

    public Maze chooseMazeSize() throws IOException {
        String options = String.join("\n",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ª–∞–±–∏—Ä–∏–Ω—Ç–∞:",
            SMALL_MAZE_ID + " - –ú–∞–ª–µ–Ω—å–∫–∏–π (17*31)",
            MEDIUM_MAZE_ID + " - –°—Ä–µ–¥–Ω–∏–π (25x45)",
            LARGE_MAZE_ID + " - –ë–æ–ª—å—à–æ–π (35x65)"
        );

        ioHandler.writeLine(options);

        while (true) {
            String input = ioHandler.readLine();

            if (input == null || input.trim().isEmpty()) {
                ioHandler.writeLine(INPUT_NULL);
                continue;
            }

            int choice;
            try {
                choice = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                ioHandler.writeLine(INPUT_INCORRECT);
                continue;
            }

            switch (choice) {
                case SMALL_MAZE_ID:
                    return new Maze(SMALL_MAZE.getRow(), SMALL_MAZE.getCol());
                case MEDIUM_MAZE_ID:
                    return new Maze(MEDIUM_MAZE.getRow(), MEDIUM_MAZE.getCol());
                case LARGE_MAZE_ID:
                    return new Maze(LARGE_MAZE.getRow(), LARGE_MAZE.getCol());
                default:
                    ioHandler.writeLine(INPUT_INCORRECT);
            }
        }
    }

    public Generator chooseMazeGenerator() throws IOException {
        ioHandler.writeLine("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞:");
        ioHandler.writeLine("1 - KruskalMazeGenerator");
        ioHandler.writeLine("2 - GrowingTreeMazeGenerator");

        while (true) {
            String input = ioHandler.readLine();

            if (input == null || input.trim().isEmpty()) {
                ioHandler.writeLine(INPUT_NULL);
                continue;
            }

            int choice;
            try {
                choice = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                ioHandler.writeLine(INPUT_NEED_1_OR_2);
                continue;
            }

            switch (choice) {
                case 1:
                    return new KruskalMazeGenerator();
                case 2:
                    return new GrowingTreeMazeGenerator();
                default:
                    ioHandler.writeLine(INPUT_INCORRECT);
            }
        }
    }

    public Solver chooseSolver() throws IOException {
        ioHandler.writeLine("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏:");
        ioHandler.writeLine("1 - ShortestPathFinder");
        ioHandler.writeLine("2 - AStarSolver");

        while (true) {
            String input = ioHandler.readLine();

            if (input == null || input.trim().isEmpty()) {
                ioHandler.writeLine(INPUT_NULL);
                continue;
            }

            int choice;
            try {
                choice = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                ioHandler.writeLine(INPUT_NEED_1_OR_2);
                continue;
            }

            switch (choice) {
                case 1:
                    return new ShortestPathFinder();
                case 2:
                    return new AStarSolver();
                default:
                    ioHandler.writeLine(INPUT_INCORRECT);
            }
        }
    }

    public Coordinate getCoordinate(String prompt, Maze maze) throws IOException {
        ioHandler.write(prompt);
        String input = ioHandler.readLine();

        try {
            String[] parts = input.split(",");
            int row = Integer.parseInt(parts[0]) - 1;
            int col = Integer.parseInt(parts[1]) - 1;

            if (!maze.isInBounds(row, col)) {
                ioHandler.writeLine("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.");
                return getCoordinate(prompt, maze);
            }

            return new Coordinate(row, col);
        } catch (Exception e) {
            ioHandler.writeLine("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            return getCoordinate(prompt, maze);
        }
    }

    public boolean askUserToAddSurfaces() throws IOException {
        while (true) {
            ioHandler.writeLine("–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç? (–¥–∞/–Ω–µ—Ç): ");
            String response = ioHandler.readLine().trim().toLowerCase();

            if (response.equals("–¥–∞")) {
                return true;
            } else if (response.equals("–Ω–µ—Ç")) {
                return false;
            } else {
                ioHandler.writeLine("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.");
            }
        }
    }

    public void displayMaze(Maze maze) {
        Cell[][] grid = maze.getCellArray();
        for (int row = 0; row < maze.getHeight(); row++) {
            for (int col = 0; col < maze.getWidth(); col++) {
                ioHandler.write(getDisplaySymbol(grid[row][col]));
            }
            ioHandler.writeLine("");
        }
    }

    public String getDisplaySymbol(Cell cell) {
        String displaySymbol;
        switch (cell.getType()) {
            case WALL:
                displaySymbol = "‚¨ú";  // –°–∏–º–≤–æ–ª –¥–ª—è —Å—Ç–µ–Ω—ã
                break;
            case PASSAGE:
                displaySymbol = "‚¨õÔ∏è";  // –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞
                break;
            case COIN:
                displaySymbol = "\uD83D\uDFE1";  // –°–∏–º–≤–æ–ª –¥–ª—è –º–æ–Ω–µ—Ç–∫–∏ (—É—á—É—á—à–∞—é—â–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å)
                break;
            case SAND:
                displaySymbol = "\uD83D\uDFEB";  // –°–∏–º–≤–æ–ª –¥–ª—è –ø–µ—Å–∫–∞ (—É—Ö—É–¥—à–∞—é—â–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å)
                break;
            case PATH:
                displaySymbol = "üü™";
                break;
            default:
                throw new IllegalArgumentException("Unknown cell type: ");
        }
        return displaySymbol;
    }
}
